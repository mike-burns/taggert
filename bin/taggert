#!/usr/bin/env ruby

require 'sqlite3'

class Taggert
  def self.run(args)
    new(args).run
  end

  def initialize(args)
    @args = args
  end

  def run
    create_needed_schemae
    runner.run(db, tag_name, file_names)
  ensure
    db.close if db
  end

  private

  def runner
    case @args[0]
    when 'ls'
      ListRunner
    when 'add'
      AddRunner
    when 'rm'
      RemoveRunner
    else
      HelpRunner
    end
  end

  def db
    @_db ||= SQLite3::Database.new db_file_name
  end

  def db_file_name
    File.join(Dir.pwd,  ".taggert.sqlite")
  end

  def create_needed_schemae
    db.execute(tags_table_sql)
    db.execute(files_table_sql)
    db.execute(join_table_sql)
  end

  def tag_name
    @args[1]
  end

  def file_names
    @args[2..-1].map { |file_name| File.join(Dir.pwd, file_name) }
  end

  def tags_table_sql
    <<-SQL
      CREATE TABLE IF NOT EXISTS tags (id INTEGER PRIMARY KEY, name TEXT)
    SQL
  end

  def files_table_sql
    <<-SQL
      CREATE TABLE IF NOT EXISTS files (id INTEGER PRIMARY KEY, file_name TEXT)
    SQL
  end

  def join_table_sql
    <<-SQL
      CREATE TABLE IF NOT EXISTS tags_and_files (tag_id INTEGER, file_id INTEGER)
    SQL
  end

  class HelpRunner
    def self.run(*ignored)
      new.run
    end

    def run
      $stderr.puts help_text
    end

    private

    def help_text
      <<-HELP_TEXT
      usage: taggert subcommand tag [file ...]

      subcommands:
        add
        rm
        ls
      HELP_TEXT
    end
  end

  class ListRunner
    def self.run(db, tag, *ignored)
      new(db, tag).run
    end

    def initialize(db, tag)
      @db = db
      @tag = tag
    end

    def run
      matching_rows.each { |row| puts row[0] }
    end

    private

    def matching_rows
      @db.execute(matching_rows_sql, @tag)
    end

    def matching_rows_sql
      <<-SQL
        SELECT files.file_name
        FROM files
        JOIN tags_and_files t_a_f ON t_a_f.file_id = files.id
        JOIN tags ON t_a_f.tag_id = tags.id
        WHERE tags.name = ?
      SQL
    end
  end

  class AddRunner
    def self.run(db, tag, files)
      new(db, tag, files).run
    end

    def initialize(db, tag, files)
      @db = db
      @tag = tag
      @files = files
    end

    def run
      tag_id = create_tag
      @files.each do |file|
        file_id = create_file(file)
        create_connection(tag_id, file_id)
      end
    end

    private

    def create_tag
      if tag_id = fetch_tag_id
        tag_id
      else
        insert_tag
        fetch_last_id
      end
    end

    def create_file(file)
      if file_id = fetch_file_id(file)
        file_id
      else
        insert_file(file)
        fetch_last_id
      end
    end

    def create_connection(tag_id, file_id)
      unless connection_exists?(tag_id, file_id)
        insert_connection(tag_id, file_id)
      end
    end

    def fetch_tag_id
      @db.get_first_row("SELECT id FROM tags WHERE name = ? LIMIT 1", @tag)
    end

    def insert_tag
      @db.execute("INSERT INTO tags (name) VALUES (?)", @tag)
    end

    def fetch_file_id(file)
      @db.get_first_row("SELECT id FROM files WHERE file_name = ? LIMIT 1", file)
    end

    def insert_file(file)
      @db.execute("INSERT INTO files (file_name) VALUES (?)", file)
    end

    def connection_exists?(tag_id, file_id)
      @db.get_first_row("SELECT 1 FROM tags_and_files WHERE tag_id = ? AND file_id = ? LIMIT 1", tag_id, file_id)
    end

    def insert_connection(tag_id, file_id)
      @db.execute("INSERT INTO tags_and_files (tag_id, file_id) VALUES(?, ?)", tag_id, file_id)
    end

    def fetch_last_id
      @db.last_insert_row_id
    end
  end

  class RemoveRunner
    def self.run(db, tag, files)
      new(db, tag, files).run
    end

    def initialize(db, tag, files)
      @db = db
      @tag = tag
      @files = files
    end

    def run
      @files.each { |file| @db.execute(delete_sql, @tag, file) }
    end

    private

    def delete_sql
      <<-SQL
        DELETE FROM tags_and_files
        WHERE tag_id = (SELECT tags.id FROM tags WHERE tags.name = ?)
        AND file_id = (SELECT files.id FROM files WHERE files.file_name = ?)
      SQL
    end
  end
end

Taggert.run(ARGV)
